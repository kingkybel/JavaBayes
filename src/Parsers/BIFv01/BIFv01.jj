/*
 * Definitions for the InterchangeFormat (BIF 0.1) parser
 * Author: Fabio Cozman
 * <fgcozman@cs.cmu.edu><http://www.cs.cmu.edu/~fgcozman/home.html>
 *
 * The InterchangeFormat parser is free software; you can
 * redistribute it and/or modify it under the terms of the GNU General
 * Public License as published by the Free Software Foundation, provided
 * that this notice and the name of the author appear in all copies.
 * If you're using the software, please notify fgcozman@cs.cmu.edu so
 * that you can receive updates and patches.
 * The InterchangeFormat parser is distributed "as is", in the
 * hope that it will be useful, but WITHOUT ANY WARRANTY; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with the BayesianNetworks package. If not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

// ==========================================================
// Options for Jack (only non-default options)
// ==========================================================

options
{
    STATIC = false; 
}

// ==========================================================
// Java code that is incorporated into the parser
// ==========================================================

PARSER_BEGIN(BIFv01)

package Parsers.BIFv01;

import InterchangeFormat.*;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * Definition of the Interchange Format class and its variables. The IFBayesNet
 * ifbn contains the parsed Bayesian network.
 * This parser uses the data structures in the JavaBayes core engine (package 
 * BayesianNetworks); other implementations may use different data structures.
 */
public class BIFv01 extends InterchangeFormat
{
    IFBayesNet ifbn;

    public IFBayesNet getBayesNetFromInterchangeFmt()
    {
        return(ifbn);
    }

    /* Method responsible for globbing undefined text in an input file */
    void globUndefinedText() throws ParseException
    {
	Token t;
	while (true)
        {
            t = getToken(1);
            if ((t.kind == 0) ||
                (t.kind == NETWORK) ||
                (t.kind == VARIABLE) ||
                (t.kind == PROBABILITY))
            {
                    break;
            }
            else
            {
                getNextToken();
            }
	  }
  }
}

PARSER_END(BIFv01)

// ==========================================================
// List of tokens
// ==========================================================

SKIP : /* Whitespace and C/C++ comments are ignored */
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

SKIP : /* Characters that can be used to separate words are ignored */
{
  ","
}

TOKEN :  /* Keywords */
{
  < NETWORK: "network" >
| < VARIABLE: "variable" >
| < PROBABILITY: "probability" >
| < PROPERTY: "property" >
| < VARIABLETYPE: "type" >
| < DISCRETE: "discrete" >
| < DEFAULTVALUE: "default" >
| < TABLEVALUES: "table" >
}

TOKEN :  /* Property lists */
{
  < PROPERTYSTRING: <PROPERTY> (~[";"])* ";" >
}

TOKEN :  /* Definition of a word: alphabetic, numeric and "_" "-" characters */
{
  < WORD: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["a"-"z","A"-"Z","_","-"] >
| < #DIGIT:  ["0"-"9"] >
}

TOKEN : /* Definition of a non-negative number */
{
  < NUMBER:
      ["1"-"9"] (["0"-"9"])*
      | (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ (<EXPONENT>)?
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

// ==========================================================
// THE INTERCHANGE FORMAT GRAMMAR STARTS HERE
// ==========================================================

/**
 * Basic parsing function. First looks for a Network Declaration,
 * then looks for an arbitrary number of VariableDeclaration or
 * ProbabilityDeclaration non-terminals. The objects are
 * in the vectors ifbn.pvs and ifbn.ifProbFuncs.
 */
void CompilationUnit() :
{
    IFProbabilityVariable pv;
    IFProbabilityFunction ifProbFunc;
}
{
	{ globUndefinedText(); }
  NetworkDeclaration()
	{ globUndefinedText(); }
  ( pv=VariableDeclaration()
	{ ifbn.add(pv); globUndefinedText(); }
  |
    ifProbFunc=ProbabilityDeclaration()
	{ ifbn.add(ifProbFunc); globUndefinedText(); }
  )*
  <EOF>
}

/**
 * Detect and initialize the network.
 */
void NetworkDeclaration() :
{
    Token t;
    ArrayList<String> properties;
}
{
  <NETWORK> t=<WORD> properties = NetworkContent()
	{ ifbn = new IFBayesNet(t.image, properties); }
}

/**
 * Fill the network list of properties.
 */
ArrayList<String> NetworkContent() :
{
    ArrayList<String> properties = new ArrayList<String>();
    String s;
}
{
  "{" ( s=Property()
	{ properties.add(s); }
  )* "}"
	{ return(properties); }
}

/**
 * Detect a variable declaration.
 */
IFProbabilityVariable VariableDeclaration() :
{
    String s;
    IFProbabilityVariable pv;
}
{
  <VARIABLE> s=ProbabilityVariableName() pv=VariableContent(s)
	{ return(pv); }
}

/**
 * Fill a variable list of properties.
 */
IFProbabilityVariable VariableContent(String name) :
{
    String s;
    String values[] = null;
    ArrayList<String> properties = new ArrayList<String>();
    IFProbabilityVariable pv = new IFProbabilityVariable();
}
{
  "{" ( s=Property()
	{ properties.add(s); }
    | values=VariableDiscrete()  )*  "}"
	{ pv.setName(name);
	  pv.setProperties(properties);
	  pv.setValues(values);
	  return(pv); }
}

/**
 * Fill a variable type discrete.
 */
String[] VariableDiscrete() :
{
    String values[] = null;
}
{
  <VARIABLETYPE> <DISCRETE>
    "[" <NUMBER> "]" "{"
    values=VariableValuesList()
    "}" ";"
	{ return(values); }
}

/**
 * Get the values of a discrete variable.
 */
String[] VariableValuesList() :
{
    int i;
    String value;
    String values[] = null;
    ArrayList<String> v = new ArrayList<String>();
    Iterator e;
}
{
    value=ProbabilityVariableValue()
	{
            v.add(value);
        }
    ( value=ProbabilityVariableValue()
	{
            v.add(value);
        }
    )*
	{
            values = new String[v.size()];
            for (e=v.iterator(), i=0; e.hasNext(); i++)
            {
		values[i] = (String)(e.next());
            }
            return(values);
        }
}

/**
 * Pick a single word as a probability variable value.
 */
String ProbabilityVariableValue() :
{
    Token t;
}
{
   ( t=<WORD> | t=<NUMBER> )
	{
            return(t.image);
        }
}

/**
 * Detect a probability declaration.
 */
IFProbabilityFunction ProbabilityDeclaration() :
{
    String vs[];
    IFProbabilityFunction ifProbFunc = new IFProbabilityFunction();
}
{
  <PROBABILITY> ProbabilityVariablesList(ifProbFunc) ProbabilityContent(ifProbFunc)
	{
            return(ifProbFunc);
        }
}

/**
 * Parse the list of Probability variables.
 */
void ProbabilityVariablesList(IFProbabilityFunction ifProbFunc) :
{
    int i;
    Iterator e;
    String variable_name;
    int cond = -1;
    String vs[];
    ArrayList<String> v_list = new ArrayList<String>();
}
{
   "("
   variable_name=ProbabilityVariableName()
       [ cond=ConditionalMark(v_list) ]
	{
            v_list.add(variable_name);
        }
   ( variable_name=ProbabilityVariableName()
       [ cond=ConditionalMark(v_list) ]
	{
            v_list.add(variable_name);
        }
   )* ")"
	{
            vs = new String[v_list.size()];
            for (e=v_list.iterator(), i=0; e.hasNext(); i++)
            {
		vs[i] = (String)(e.next());
            }
            ifProbFunc.setVariables(vs);
            ifProbFunc.setConditionalIndex(cond);
        }
}

/**
 *  Find the conditional mark.
 */
int ConditionalMark(ArrayList v):
{
}
{
    "|"
    {
        return(v.size());
    }
}

/**
 * Pick a single word as a probability variable name.
 */
String ProbabilityVariableName() :
{
    Token t;
}
{
   t=<WORD>
	{
            return(t.image);
        }
}

/**
 * Fill a Probability list of properties.
 */
void ProbabilityContent(IFProbabilityFunction ifProbFunc) :
{
    String s = null;
    ArrayList<String> properties = new ArrayList<String>();
    IFProbabilityEntry e = null;
    ArrayList entries = new ArrayList();
    ArrayList defs = new ArrayList();
    ArrayList tabs = new ArrayList();
    double def[] = null;
    double tab[] = null;
}
{
  "{" ( s=Property()
	{ properties.add(s); }
      |
      def=ProbabilityDefaultEntry()
    { defs.add(def); }
      |
      e=ProbabilityEntry()
	{ entries.add(e); }
      |
      tab=ProbabilityTable()
    { tabs.add(tab); }
      )* "}"
	{ ifProbFunc.setProperties(properties);
	  ifProbFunc.setDefaults(defs);
	  ifProbFunc.setEntries(entries);
	  ifProbFunc.setTables(tabs); }
}

/**
 * Pick a probability entry.
 */
IFProbabilityEntry ProbabilityEntry() :
{
    String s[];
    double d[];
}
{
   s=ProbabilityValuesList() d=FloatingPointList() ";"
	{ return( new IFProbabilityEntry(s, d) ); }
}

/**
 * Parse the list of Probability values in an entry.
 */
String[] ProbabilityValuesList() :
{
    int i;
    Iterator e;
    String variable_name;
    String vs[];
    ArrayList<String> v_list = new ArrayList<String>();
}
{
   "("
   variable_name=ProbabilityVariableValue()
	{ v_list.add(variable_name); }
   ( variable_name=ProbabilityVariableValue()
	{ v_list.add(variable_name); }
   )* ")"
	{
            vs = new String[v_list.size()];
            for (e=v_list.iterator(), i=0; e.hasNext(); i++)
            {
		vs[i] = (String)(e.next());
            }
            return(vs);
        }
}

double[] ProbabilityDefaultEntry() :
{
    double d[];
}
{
  <DEFAULTVALUE> d=FloatingPointList() ";"
	{
            return(d);
        }
}

double[] ProbabilityTable() :
{
    double d[];
}
{
  <TABLEVALUES> d=FloatingPointList() ";"
	{
            return(d);
        }
}

// ======================================================
//          Some general purpose non-terminals 
// ======================================================

/**
 * Pick a list of non-negative floating numbers.
 */
double[] FloatingPointList() :
{
    int i;
    Double d;
    double ds[];
    ArrayList<Double> d_list = new ArrayList<Double>();
    Iterator e;
}
{
  d=FloatingPointNumber()
	{
            d_list.add(d);
        }
  ( d=FloatingPointNumber()
	{
            d_list.add(d);
        }
  )*
	{
            ds = new double[d_list.size()];
            for (e=d_list.iterator(), i=0; e.hasNext(); i++)
            {
		d = (Double)(e.next());
		ds[i] = d.doubleValue();
            }
            return(ds);
        }
}

/**
 * Pick a non-negative floating number; necessary to allow
 * ignored characters and comments to exist in the middle
 * of a FloatingPointList().
 */
Double FloatingPointNumber() :
{
    Token t;
}
{
  t=<NUMBER>
	{
            return( Double.valueOf(t.image) );
        }
}

/**
 * Property definition.
 */
String Property() :
{
    int k;
    Token t;
    String s;
}
{
  t=<PROPERTYSTRING>
	{
            s = t.image;
            k = s.indexOf(' ');
            return(s.substring(k, s.length() - 1));
        }
}

